{{- if include "alloy.shouldDeployUpgradeResources" . }}
apiVersion: batch/v1
kind: Job
metadata:
  name: bb-alloy-upgrade
  namespace: monitoring
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 480
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bigbang-alloy-upgrade-job
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      serviceAccountName: alloy-bb-upgrade
      automountServiceAccountToken: true
      containers:
        - name: bb-alloy-upgrade
          image: "{{ $.Values.addons.alloy.autoRollingUpgrade.image.repository }}:{{ $.Values.addons.alloy.autoRollingUpgrade.image.tag }}"
          command:
            - /bin/sh
            - -c
            - |
              echo "üîÑ Fetching resources with label helm.toolkit.fluxcd.io/name=alloy in namespace monitoring..."
              echo "‚ö†Ô∏è Note: Endpointslice resources will NOT be deleted"

              # Fetch resource types
              resource_types=$(kubectl api-resources --verbs=list --namespaced -o name | grep -v 'NAME')

              echo "üìã Fetched resource types:"
              echo "$resource_types"
              echo "-------------------------------------"

              # Fetch all resources matching label, ignoring empty output and headers
              cmd_output=$(echo "$resource_types" | xargs -r -n 1 kubectl get --show-kind --ignore-not-found -l helm.toolkit.fluxcd.io/name=alloy -n monitoring | tail -n +2 || true)

              echo "üìã Fetched resources:"
              echo "$cmd_output"
              echo "-------------------------------------"

              # Exit if no resources are found
              if [[ -z "$cmd_output" ]]; then
                  echo "‚úÖ No matching resources found. Exiting."
                  exit 0
              fi

              # Process the output
              while IFS= read -r line; do
                  [[ -z "$line" ]] && continue  # Skip empty lines

                  # Extract only the first field to get resourceType/resourceName
                  first_field=$(echo "$line" | awk '{print $1}')

                  # Ensure it contains a slash (resource type/name format)
                  if [[ "$first_field" != */* ]]; then
                      echo "‚ö†Ô∏è Skipping malformed line (no resource type): $line"
                      continue
                  fi

                  resource_type=$(echo "$first_field" | cut -d'/' -f1)
                  resource_name=$(echo "$first_field" | cut -d'/' -f2)

                  echo "üõ† Extracted -> Type: $resource_type, Name: $resource_name"

                  # Skip deletion for endpointslice
                  if [[ "$resource_type" == "endpointslice.discovery.k8s.io" ]]; then
                      echo "‚è© Skipping endpointslice: $resource_name"
                      continue
                  fi

                  # Validate extraction
                  if [[ -z "$resource_type" || -z "$resource_name" ]]; then
                      echo "‚ö†Ô∏è Skipping malformed line: $line"
                      continue
                  fi

                  ((resource_count++))
                  echo "üöÄ Deleting $resource_type/$resource_name in namespace monitoring..."

                  # Attempt deletion with a retry
                  if ! kubectl delete "$resource_type" "$resource_name" -n monitoring; then
                      echo "‚ö†Ô∏è Retrying deletion of $resource_type/$resource_name..."
                      sleep 2
                      kubectl delete "$resource_type" "$resource_name" -n monitoring || {
                          echo "‚ùå Failed to delete $resource_type/$resource_name"
                          exit 1
                      }
                  fi

                  echo "‚úÖ Successfully deleted $resource_type/$resource_name"
              done <<< "$cmd_output"

              echo "üéâ Resource deletion completed successfully!"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
      restartPolicy: Never
{{- end }}
