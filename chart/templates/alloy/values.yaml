{{- /* Create secret */ -}}
{{- if .Values.alloy.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.alloy "name" "alloy" "defaults" (include "bigbang.defaults.alloy" .)) }}
{{- end }}

{{- define "bigbang.defaults.alloy" -}}
{{- $alloyLogsEnabled := (dig "alloyLogs" "enabled" false .Values.alloy) }}
{{- $alloyMetricsEnabled := (dig "alloyMetrics" "enabled" false .Values.alloy) }}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}

{{- $lokiServiceMap := dict
    "monolith" "logging-loki"
    "scalable" "logging-loki-write"
    "distributed" "logging-loki-distributor"
}}
{{- $lokiServiceName := index $lokiServiceMap .Values.loki.strategy }}
{{- $lokiWriteDestUrl := printf "http://%s.logging.svc.cluster.local:3100/loki/api/v1/push" $lokiServiceName }}

{{- $mimirWriteDestUrl:= ternary
  "https://mimir-mimir-gateway.mimir.svc.cluster.local:80/api/v1/push"
  "http://mimir-mimir-gateway.mimir.svc.cluster.local/api/v1/push"
  $istioEnabled
}}

{{- $prometheusWriteDestUrl:= ternary
  "https://monitoring-monitoring-kube-prometheus.monitoring.svc:9090/api/v1/write"
  "http://monitoring-monitoring-kube-prometheus.monitoring.svc:9090/api/v1/write"
  $istioEnabled
}}


{{- $istioInjection := (and $istioEnabled (eq (dig "istio" "injection" "enabled" .Values.alloy) "enabled")) }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "hardened" "enabled" false .Values.istiod.values)
      (dig "istio" "hardened" "enabled" false .Values.monitoring.values)
      (dig "istio" "hardened" "enabled" false .Values.addons.authservice.values)
      (dig "istio" "hardened" "enabled" false .Values.grafana.values)
      (dig "istio" "hardened" "enabled" false .Values.loki.values)
      (dig "istio" "hardened" "enabled" false .Values.eckOperator.values)
      (dig "istio" "hardened" "enabled" false .Values.elasticsearchKibana.values)
      (dig "istio" "hardened" "enabled" false .Values.addons.mimir.values)
      (dig "istio" "hardened" "enabled" false .Values.alloy.values)
    }}

upstream:
  destinations:
    {{- if and $alloyLogsEnabled .Values.loki.enabled }}
    - name: loki
      type: loki
      url: {{ $lokiWriteDestUrl }}
    {{- end }}
    {{- if and $alloyMetricsEnabled .Values.monitoring.enabled }}
    - name: prometheus
      type: prometheus
      url: {{ $prometheusWriteDestUrl }}
      {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.monitoring.values) "STRICT") }}
      tls:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
      {{- end }}
    {{- end }}
    {{- if and $alloyMetricsEnabled .Values.addons.mimir.enabled }}
    - name: mimir
      type: prometheus
      url: {{ $mimirWriteDestUrl }}
      {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" .Values.addons.mimir.values) "STRICT") }}
      tls:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
      {{- end }}
    {{- end }}
  {{- if .Values.alloy.additionalDestinations }}
  {{- toYaml .Values.alloy.additionalDestinations | nindent 4 }}
  {{- end }}
  {{- if $alloyLogsEnabled }}
  alloy-logs:
    enabled: true
  podLogs:
    enabled: true
    destinations:
      {{- if .Values.loki.enabled }}
      - loki
      {{- end }}
      {{- if .Values.alloy.additionalDestinations }}
      {{- range $dest := .Values.alloy.additionalDestinations }}
      {{- if eq (lower $dest.type) "loki" }}
      - {{ $dest.name }}
      {{- end }}
      {{- end }}
      {{- end }}
    collector: alloy-logs
    labelsToKeep:
      - app.kubernetes.io/name
      - container
      - instance
      - job
      - level
      - namespace
      - service.name
      - service.namespace
      - deployment.environment
      - deployment.environment.name
      - k8s.namespace.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.daemonset.name
      - k8s.cronjob.name
      - k8s.job.name
      - k8s.node.name
      - k8s.pod.name
      - pod
    structuredMetadata:
      k8s.pod.name: null
      pod: null

  {{- if $alloyMetricsEnabled }}
  prometheusOperatorObjects:
    enabled: true
  alloy-metrics:
    enabled: true
    {{- if $istioInjection }}
    controller:
      podAnnotations:
        {{ include "istioAnnotation" . }}
        traffic.sidecar.istio.io/includeOutboundIPRanges: ""
        proxy.istio.io/config: |
          proxyMetadata:
            OUTPUT_CERTS: /etc/istio-output-certs
        sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]'
      volumes:
        extra:
        - emptyDir:
            medium: Memory
          name: istio-certs
    alloy:
      mounts:
        extra:
        - mountPath: /etc/prom-certs/
          name: istio-certs
    {{- end }}
  {{- end }}

{{- if $.Values.monitoring.enabled }}
serviceMonitors:
  - name: alloy-alloy-logs
    additionalLabels:
      app.kubernetes.io/instance: alloy
      app.kubernetes.io/name: alloy-logs
    selectorLabels:
      app.kubernetes.io/instance: alloy-alloy-logs
      app.kubernetes.io/name: alloy-logs
    {{- if and $istioEnabled (eq (dig "istio" "mtls" "mode" "STRICT" $.Values.alloy.values) "STRICT") }}
    scheme: https
    tlsConfig:
      caFile: /etc/prom-certs/root-cert.pem
      certFile: /etc/prom-certs/cert-chain.pem
      keyFile: /etc/prom-certs/key.pem
      insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate
    {{- end }}
  {{- end }}
  {{- end }}
{{- end }}