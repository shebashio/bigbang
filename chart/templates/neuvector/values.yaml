{{- define "bigbang.defaults.neuvector" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
{{- $istioInjection := and $istioEnabled (eq (dig "istio" "injection" "enabled" .Values.neuvector) "enabled") -}}

# Includes suffix of "A1a" to ensure password always meets default minimum password requirements
{{- $neuvectorMetricsPass := join "" (list (randAlphaNum 12) (randAlpha 2 | upper) (randAlpha 2 | lower) (randNumeric 2))}}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
domain: {{ default .Values.domain .Values.hostname }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or (dig "istio" "hardened" "enabled" false .Values.neuvector.values) (dig "hardened" "enabled" false .Values.istiod.values) }}
  neuvector:
    gateways:
      - {{ include "getGatewayName" (dict "gateway" .Values.neuvector.ingress.gateway "root" .)}}
  injection: {{ ternary "enabled" "disabled" $istioInjection }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  ingressLabels:
  {{- if $istioEnabled }}
  {{- include "getGatewaySelector" (dict "pkg" .Values.neuvector "root" .) | nindent 4 }}
  {{- end }}

monitoring:
  enabled: {{ .Values.monitoring.enabled }}

upstream:
  openshift: {{ .Values.openshift }}
  {{- if or .Values.monitoring.enabled $istioInjection .Values.neuvector.sso.enabled }}
  controller:
    {{- if $istioInjection }}
    podAnnotations:
      {{ include "istioAnnotation" . }}
    {{- end }}
    {{- if or .Values.monitoring.enabled .Values.neuvector.sso.enabled }}
    secret:
      enabled: true
      data: 
        {{- if .Values.monitoring.enabled }}
        userinitcfg.yaml:
          always_reload: true
          users:
          - username: metrics
            password: {{ $neuvectorMetricsPass }}
            role: reader
            fullname: metrics
        {{- end }}
        {{- if .Values.neuvector.sso.enabled }}
        oidcinitcfg.yaml:
          always_reload: true
          enable: {{ .Values.neuvector.sso.enabled }}
          issuer: {{ default (include "sso.url" .) (tpl (default "" .Values.neuvector.sso.issuer) .) }}
          client_id: {{ .Values.neuvector.sso.client_id }}
          client_secret: {{ .Values.neuvector.sso.client_secret | default "no-secret" }}
          default_role: {{ .Values.neuvector.sso.default_role }}
          group_claim: {{ .Values.neuvector.sso.group_claim }}
          group_mapped_roles: 
            {{ toYaml .Values.neuvector.sso.group_mapped_roles | nindent 10 }}
        {{- end }}
    {{- end }}
    {{- if and .Values.neuvector.sso.enabled (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso)) }}
    sso:
      certificateAuthority:
        secretName: {{ default (dig "certificateAuthority" "secretName" "" .Values.sso) .Values.sso.secretName }}
    {{- end }}
  {{- end }}

  monitor:
    install: {{ .Values.monitoring.enabled }}
    exporter:
      enabled: {{ .Values.monitoring.enabled }}
      {{- if or .Values.monitoring.enabled $istioInjection }}
      podAnnotations:
        {{- if .Values.monitoring.enabled }}
        checksum/metrics-pass: {{ sha256sum $neuvectorMetricsPass }}
        {{- end }}
        {{- if $istioInjection }}
        {{ include "istioAnnotation" . }}
        {{- end }}
      {{- end }}
      serviceMonitor:
        enabled: {{ .Values.monitoring.enabled }}
      svc:
        enabled: {{ .Values.monitoring.enabled }}
        type: ClusterIP
      CTRL_USERNAME: metrics
      CTRL_PASSWORD: {{ $neuvectorMetricsPass }}


  {{- if $istioInjection }}
  enforcer:
    podAnnotations:
      {{ include "istioAnnotation" . }}
  cve:
    updater:
      podAnnotations:
        {{ include "istioAnnotation" . }}
    scanner:
      podAnnotations:
        {{ include "istioAnnotation" . }}
  manager:
    podAnnotations:
      {{ include "istioAnnotation" . }}
  {{- end }}

{{- end }}

{{- /* Create secret */ -}}
{{- if .Values.neuvector.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.neuvector "name" "neuvector" "defaults" (include "bigbang.defaults.neuvector" .)) }}
{{- end }}
