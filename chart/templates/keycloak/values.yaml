{{- if .Values.addons.keycloak.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.keycloak "name" "keycloak" "defaults" (include "bigbang.defaults.keycloak" .)) }}
{{- end }}

{{- define "bigbang.defaults.keycloak" -}}
{{- $istioEnabled := eq (include "istioEnabled" .) "true" }}
{{- $tlsEnabled := and .Values.addons.keycloak.ingress.cert .Values.addons.keycloak.ingress.key -}}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
domain: {{ $domainName }}

{{- $istioInjection := and $istioEnabled (eq (dig "istio" "injection" "enabled" .Values.addons.keycloak) "enabled") }}
{{- $monitoringEnabled := .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  ingressLabels:
    {{- include "getGatewaySelector" (dict "default" "passthrough" "pkg" .Values.addons.keycloak "root" .) | nindent 4 }}
  {{- if .Values.ztunnel.enabled }}
  additionalPolicies:
    - name: ingress-prometheus-ztunnel-traffic
      spec:
        ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: monitoring
            podSelector:
              matchLabels:
                app.kubernetes.io/name: prometheus
          ports:
          - port: 15008
            protocol: TCP
        podSelector: {}
        policyTypes:
        - Ingress
  {{- if addons .Values.addons.authservice.enabled .Values.addons.authservice.istio.ambient }}
    - name: allow-ingress-public-ingressgateway-authservice-waypoint-15008
      spec:
        ingress:
        - ports:
          - port: 15008
            protocol: TCP
        - from:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: istio-gateway
            podSelector:
              matchLabels:
                app.kubernetes.io/name: public-ingressgateway
        podSelector:
          matchLabels:
            app.kubernetes.io/name: authservice-waypoint
        policyTypes:
        - Ingress
    - name: allow-all-egress-authservice-waypoint-15008
      spec:
        egress:
        - ports:
          - port: 15008
            protocol: TCP
        - to:
          - namespaceSelector: {}
            podSelector: {}
        podSelector:
          matchLabels:
            app.kubernetes.io/name: authservice-waypoint
        policyTypes:
        - Egress
    - name: allow-all-ingress-authservice-waypoint-15008
      spec:
        ingress:
        - ports:
          - port: 15008
            protocol: TCP
        - from:
          - namespaceSelector: {}
            podSelector: {}
        podSelector:
          matchLabels:
            app.kubernetes.io/name: authservice-waypoint
        policyTypes:
        - Ingress
  {{- end }}
    {{- if .Values.addons.keycloak.istio.ambient }}
    - name: ingress-passthrough-gateway
      spec:
        ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                app.kubernetes.io/name: istio-gateway
            podSelector:
              matchLabels:
                app.kubernetes.io/name: passthrough-ingressgateway
          ports:
          - port: 15008
            protocol: TCP
        podSelector: {}
        policyTypes:
        - Ingress
    - name: ingress-allow-all-kubelet-probe
      spec:
        ingress:
        - from:
          - ipBlock:
              cidr: 169.254.7.127/32
        podSelector: {}
        policyTypes:
        - Ingress
    {{- end }}
  {{- end }}

istio:
  enabled: {{ $istioEnabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.addons.keycloak.values)
      (dig "hardened" "enabled" false .Values.istiod.values)
    }}
  injection: {{ dig "istio" "injection" "enabled" .Values.addons.keycloak }}
  keycloak:
    enabled: true
    gateways:
      - {{ include "getGatewayName" (dict "default" "passthrough" "gateway" .Values.addons.keycloak.ingress.gateway "root" .)}}

upstream:
  replicas: 1
  image:
    pullPolicy: {{ .Values.imagePullPolicy }}
  imagePullSecrets:
  - name: private-registry
  {{- with .Values.addons.keycloak.database }}
  database:
    existingSecret: ""
    existingSecretKey: ""
    vendor: {{ coalesce .type "postgres"}} 
    hostname: {{ coalesce .host .hostname "keycloak-postgresql" }}
    port: {{ coalesce .port 5432 }}
    database: {{ coalesce .database "keycloak" }}
    username: {{ coalesce .username "keycloak" }}
    password: {{ coalesce .password "keycloak" | quote }}
  {{- end }}

  {{- if $istioEnabled }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
  {{- end }}

  {{- if $tlsEnabled }}
  http:
    internalScheme: HTTPS
  {{- end }}

  extraEnv: |
    - name: KC_HTTPS_CLIENT_AUTH
      value: request
    - name: KC_TRUSTSTORE_PATHS
      value: /etc/ssl/certs/
    - name: KC_HOSTNAME
      value: keycloak.{{ .Values.domain }}
    - name: KC_HOSTNAME_STRICT
      value: "true"
    {{- if $tlsEnabled }}
    - name: KC_HTTPS_CERTIFICATE_FILE
      value: /opt/keycloak/conf/tls.crt
    - name: KC_HTTPS_CERTIFICATE_KEY_FILE
      value: /opt/keycloak/conf/tls.key
    {{- end }}

  {{- if $istioEnabled }}
  serviceHeadless:
    extraPorts:
    - name: jgroups
      port: 7800
      protocol: TCP
      targetPort: 7800
    - name: jgroups-fd
      port: 57800
      protocol: TCP
      targetPort: 57800
  {{- end }}

  serviceMonitor:
    enabled: {{ $monitoringEnabled }}
    {{- if $monitoringEnabled }}
    tlsConfig:
      insecureSkipVerify: true
    {{- end }}


  {{- if or .Values.addons.keycloak.database.host (and .Values.addons.keycloak.ingress.cert .Values.addons.keycloak.ingress.key) }}
  secrets:
    {{- if $tlsEnabled }}
    tlscert:
      stringData:
        tls.crt: {{ .Values.addons.keycloak.ingress.cert | quote }}
    tlskey:
      stringData:
        tls.key: {{ .Values.addons.keycloak.ingress.key  | quote }}
    {{- end }}

  {{- end }}
  {{- if $tlsEnabled }}
  extraVolumes: |
    - name: tlscert
      secret:
        secretName: '{{ `{{ include "keycloak.fullname" . }}` }}-tlscert'
    - name: tlskey
      secret:
        secretName: '{{ `{{ include "keycloak.fullname" . }}` }}-tlskey'

  extraVolumeMounts: |
    # keep /etc/x509/https/ for legacy backwards compatibility
    - name: tlscert
      mountPath: /etc/x509/https/tls.crt
      subPath: tls.crt
      readOnly: true
    - name: tlskey
      mountPath: /etc/x509/https/tls.key
      subPath: tls.key
      readOnly: true
    # Quarkus cert paths
    - name: tlscert
      mountPath: /opt/keycloak/conf/tls.crt
      subPath: tls.crt
      readOnly: true
    - name: tlskey
      mountPath: /opt/keycloak/conf/tls.key
      subPath: tls.key
      readOnly: true
  {{- end }}

postgresql:
  {{- if or .Values.addons.keycloak.database.host (dig "upstream" "database" "hostname" false .Values.addons.keycloak.values)  }}
  enabled: false
  {{- else }}
  enabled: true
  auth:
    enablePostgresUser: true
  global:
    imagePullSecrets:
    - private-registry
    postgresql:
      auth:
        username: keycloak
        password: keycloak
        database: keycloak
  {{- end }}

  {{- if $istioEnabled }}
  primary:
    {{- if $istioEnabled }}
    annotations:
      {{- include "istioAnnotation" . | nindent 6 }}
    {{- end }}
  readReplicas:
    {{- if $istioEnabled }}
    annotations:
      {{- include "istioAnnotation" . | nindent 6 }}
    {{- end }}
  {{- end }}
{{- end }}
