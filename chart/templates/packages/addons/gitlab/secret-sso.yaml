{{- if .Values.packages.addons.gitlab.enabled }}
{{- if .Values.packages.addons.gitlab.sso.enabled }}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-sso-provider
  namespace: gitlab
type: kubernetes.io/opaque
stringData:
  gitlab-sso.json: |-
    {
      "name": "openid_connect",
      "label": "{{ default .Values.sso.name .Values.packages.addons.gitlab.sso.label }}",
      "args": {
        "name": "openid_connect",
        "scope": [
          {{- $scopes := .Values.packages.addons.gitlab.sso.scopes | default (list "Gitlab") | uniq }}
          {{- range $index, $scopes }}
          {{ $index | quote }}{{if ne $index (last $scopes)}},{{end}}
          {{- end }}
        ],
        "response_type": "code",
        {{- if .Values.packages.addons.gitlab.sso.issuer_uri }}
        "issuer": "{{ .Values.packages.addons.gitlab.sso.issuer_uri }}",
        {{- else }}
        "issuer": "{{ include "sso.url" . }}",
        {{- end }}
        "client_auth_method": "query",
        "discovery": true,
        "uid_field": {{ default (dig "oidc" "claims" "username" "" .Values.sso) .Values.packages.addons.gitlab.sso.uid_field | default "preferred_username" | quote }},
        "client_options": {
          "identifier": "{{ .Values.packages.addons.gitlab.sso.client_id }}",
          "secret": "{{ .Values.packages.addons.gitlab.sso.client_secret }}",
          "redirect_uri": "https://{{ .Values.packages.addons.gitlab.hostnames.gitlab }}.{{ $domainName }}/users/auth/openid_connect/callback",
          {{- if .Values.packages.addons.gitlab.sso.end_session_uri }}
          "end_session_endpoint": "{{ .Values.packages.addons.gitlab.sso.end_session_uri }}"{{if .Values.packages.addons.gitlab.sso.groups }}{{printf "%s" ","}}{{end}}
          {{- else }}
          "end_session_endpoint": "{{ include "sso.oidc.endsession" . }}"{{if .Values.packages.addons.gitlab.sso.groups }}{{printf "%s" ","}}{{end}}
          {{- end }}
          {{- if .Values.packages.addons.gitlab.sso.groups }}
          {{- $groups := .Values.packages.addons.gitlab.sso.groups }}
          "gitlab": {
            "groups_attribute": {{- printf " %s%s" (.Values.packages.addons.gitlab.sso.groups.groupsAttribute | default "groups" | quote) "," }}
            {{- $numKeys := len (keys $groups) }}
            {{- $counter := 1 }}
            {{- $comma := "," }}
            {{- range $key, $val := $groups }}
            {{- if eq $counter $numKeys }}{{ $comma = "" }}{{end}}
            {{- if eq $key "requiredGroups" }}{{- printf "%s%s" (trimSuffix "\n" (trimAll "{}" (dict "required_groups" $val | toPrettyJson))) $comma | indent 10 }}{{end}}
            {{- if eq $key "externalGroups" }}{{- printf "%s%s" (trimSuffix "\n" (trimAll "{}" (dict "external_groups" $val | toPrettyJson))) $comma | indent 10 }}{{end}}
            {{- if eq $key "auditorGroups" }}{{- printf "%s%s" (trimSuffix "\n" (trimAll "{}" (dict "auditor_groups" $val | toPrettyJson))) $comma | indent 10 }}{{end}}
            {{- if eq $key "adminGroups" }}{{- printf "%s%s" (trimSuffix "\n" (trimAll "{}" (dict "admin_groups" $val | toPrettyJson))) $comma | indent 10 }}{{end}}
            {{- $counter = add1 $counter -}}
            {{- end -}}
          }
          {{- end }}
        }
      }
    }

{{- end }}
{{- end }}
