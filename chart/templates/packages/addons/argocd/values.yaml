{{- if .Values.packages.addons.argocd.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.packages.addons.argocd "name" "argocd" "defaults" (include "bigbang.defaults.argocd" .)) }}
{{- end }}

{{- define "bigbang.defaults.argocd" -}}
# hostname is deprecated and replaced with domain. But if hostname exists then use it.
{{- $domainName := default .Values.domain .Values.hostname }}
hostname: {{ $domainName }}
domain: {{ $domainName }}

openshift:
  enabled: {{ .Values.openshift }}

createNamespace: false

global:
  {{- $argocdHosts := (dig "istio" "argocd" "hosts" dict .Values.packages.addons.argocd.values) }}
  {{- if $argocdHosts }}
  domain: {{ tpl ($argocdHosts | first) $ }}
  {{- else }}
  domain: argocd.{{ $domainName }}
  {{- end }}
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  imagePullSecrets:
    - name: private-registry
{{- $istioInjection := (and (eq (dig "istio" "injection" "enabled" .Values.packages.addons.argocd) "enabled") .Values.packages.core.istio.enabled) }}
{{- if $istioInjection }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
{{- end }}

controller:
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  imagePullSecrets:
    - name: private-registry
  # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
  {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.packages.addons.argocd.values) "STRICT") }}
  metrics:
    serviceMonitor:
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
  {{- end }}

dex:
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  imagePullSecrets:
    - name: private-registry

{{- if and .Values.packages.addons.argocd.redis.host .Values.packages.addons.argocd.redis.port }}
redis:
  externalEndpoint: {{ .Values.packages.addons.argocd.redis.host }}:{{ .Values.packages.addons.argocd.redis.port }}
  enabled: false
{{- end }}

redis-bb:
  {{- if and .Values.packages.addons.argocd.redis.host .Values.packages.addons.argocd.redis.port }}
  enabled: false
  {{- else }}
  enabled: true
  {{- end }}
  image:
    pullPolicy: {{ .Values.imagePullPolicy }}
  auth:
    enabled: false
  {{- if .Values.packages.addons.monitoring.enabled }}
  metrics:
    enabled: true
    image:
      pullSecrets:
        - private-registry
    serviceMonitor:
      enabled: true
      namespace: argocd
      selector:
        app.kubernetes.io/name: redis-bb
        app.kubernetes.io/instance: argocd-argocd
      # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
      {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.packages.addons.argocd.values) "STRICT") }}
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
      {{- end }}

    prometheusRule:
      enabled: true
      namespace: monitoring
  {{- end }}
{{- if $istioInjection }}
  master:
    podAnnotations:
      {{ include "istioAnnotation" . }}
  replica:
    podAnnotations:
      {{ include "istioAnnotation" . }}
{{- end }}

server:
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  autoscaling:
    enabled: true
  config:
    # Must be enabled for plugins included in PlatformOne image.
    kustomize.buildOptions: "--enable-alpha-plugins"
  # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
  {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.packages.addons.argocd.values) "STRICT") }}
  metrics:
    serviceMonitor:
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
  {{- end }}

repoServer:
  image:
    imagePullPolicy: {{ .Values.imagePullPolicy }}
  autoscaling:
    enabled: true
  # conditional passes only for default istio: enabled, mTLS: SCRICT, istio injection: enabled
  {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.packages.addons.argocd.values) "STRICT") }}
  metrics:
    serviceMonitor:
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true
  {{- end }}

istio:
  enabled: {{ include "istioEnabled" . }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.packages.addons.argocd.values)
      (dig "hardened" "enabled" false .Values.packages.core.istio.values)
    }}
  injection: {{ dig "istio" "injection" "enabled" .Values.packages.addons.argocd }}
  argocd:
    gateways:
    - {{ include "istioGatewayNamespace" . }}/{{ default (include "istioPublicGateway" . ) .Values.packages.addons.argocd.ingress.gateway }}

monitoring:
  enabled: {{ .Values.packages.addons.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  ingressLabels:
    {{- $gateway := default "public" .Values.packages.addons.argocd.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.packages.core.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.packages.core.istio) | nindent 4 }}

{{- if .Values.packages.addons.argocd.sso.enabled }}
sso:
  enabled: {{ .Values.packages.addons.argocd.sso.enabled }}
  rbac:
    policy.csv: |
      {{- .Values.packages.addons.argocd.sso.groups | nindent 6 }}
  keycloakClientSecret: {{ .Values.packages.addons.argocd.sso.client_secret }}
  config:
    oidc.config: |
      name: {{ default .Values.sso.name .Values.packages.addons.argocd.sso.provider_name }}
      issuer: {{ include "sso.url" . }}
      clientID: {{ .Values.packages.addons.argocd.sso.client_id }}
      clientSecret: $oidc.keycloak.clientSecret
      requestedScopes: ["openid","ArgoCD"]
      {{- if (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso)) }}
      rootCA: |
        {{- default (dig "certificateAuthority" "cert" "" .Values.sso) .Values.sso.certificate_authority | nindent 8 }}
      {{- end }}
{{- end }}
{{- end -}}

