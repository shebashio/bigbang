{{- define "bigbang.defaults.neuvector" -}}
# Includes suffix of "A1a" to ensure password always meets default minimum password requirements
{{- $neuvectorMetricsPass := join "" (list (randAlphaNum 12) (randAlpha 2 | upper) (randAlpha 2 | lower) (randNumeric 2))}}

# hostname is deprecated and replaced with domain. But if hostname exists then use it.
domain: {{ default .Values.domain .Values.hostname }}

openshift: {{ .Values.openshift }}

{{ $istioInjection := (and (include "istioEnabled" .) (eq (dig "istio" "injection" "enabled" .Values.packages.addons.neuvector) "enabled")) }}

istio:
  enabled: {{ include "istioEnabled" . }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.packages.addons.neuvector.values)
      (dig "hardened" "enabled" false .Values.packages.core.istio.values)
    }}
  neuvector:
    gateways:
    - {{ include "istioGatewayNamespace" . }}/{{ default (include "istioPublicGateway" . ) .Values.packages.addons.monitoring.ingress.gateway }}
  injection: {{ ternary "enabled" "disabled" $istioInjection }}

monitoring:
  enabled: {{ .Values.packages.addons.monitoring.enabled }}

{{- if or .Values.packages.addons.monitoring.enabled $istioInjection .Values.packages.addons.neuvector.sso.enabled $.Values.packages.addons.kiali.enabled}}
controller:
  {{- if $istioInjection }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
  {{- end }}
  {{- if or .Values.packages.addons.monitoring.enabled .Values.packages.addons.neuvector.sso.enabled }}
  secret:
    enabled: true
    data: 
      {{- if .Values.packages.addons.monitoring.enabled }}
      userinitcfg.yaml:
        always_reload: true
        users:
        - username: metrics
          password: {{ $neuvectorMetricsPass }}
          role: reader
          fullname: metrics
      {{- end }}
      {{- if .Values.packages.addons.neuvector.sso.enabled }}
      oidcinitcfg.yaml:
        always_reload: true
        enable: {{ .Values.packages.addons.neuvector.sso.enabled }}
        issuer: {{ default (include "sso.url" .) (tpl (default "" .Values.packages.addons.neuvector.sso.issuer) .) }}
        client_id: {{ .Values.packages.addons.neuvector.sso.client_id }}
        client_secret: {{ .Values.packages.addons.neuvector.sso.client_secret | default "no-secret" }}
        default_role: {{ .Values.packages.addons.neuvector.sso.default_role }}
        group_claim: {{ .Values.packages.addons.neuvector.sso.group_claim }}
        group_mapped_roles: 
          {{ toYaml .Values.packages.addons.neuvector.sso.group_mapped_roles | nindent 10 }}
      {{- end }}
  {{- end }}
  {{- if and .Values.packages.addons.neuvector.sso.enabled (or .Values.sso.certificate_authority (dig "certificateAuthority" "cert" false .Values.sso)) }}
  sso:
    certificateAuthority:
      secretName: {{ default (dig "certificateAuthority" "secretName" "" .Values.sso) .Values.sso.secretName }}
  {{- end }}
{{- end }}

monitor:
  install: {{ .Values.packages.addons.monitoring.enabled }}
  exporter:
    enabled: {{ .Values.packages.addons.monitoring.enabled }}
    {{- if or .Values.packages.addons.monitoring.enabled $istioInjection }}
    podAnnotations:
      {{- if .Values.packages.addons.monitoring.enabled }}
      checksum/metrics-pass: {{ sha256sum $neuvectorMetricsPass }}
      {{- end }}
      {{- if $istioInjection }}
      {{ include "istioAnnotation" . }}
      {{- end }}
    {{- end }}
    serviceMonitor:
      enabled: {{ .Values.packages.addons.monitoring.enabled }}
      # conditional passes only for default istio: enabled, mTLS: SCRICT
      {{- if and $istioInjection (eq (dig "istio" "mtls" "mode" "STRICT" .Values.packages.addons.neuvector.values) "STRICT") .Values.packages.addons.monitoring.enabled }}
      scheme: https
      tlsConfig:
        caFile: /etc/prom-certs/root-cert.pem
        certFile: /etc/prom-certs/cert-chain.pem
        keyFile: /etc/prom-certs/key.pem
        insecureSkipVerify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate
      {{- end }}
    svc:
      enabled: {{ .Values.packages.addons.monitoring.enabled }}
      type: ClusterIP
    CTRL_USERNAME: metrics
    CTRL_PASSWORD: {{ $neuvectorMetricsPass }}


{{- if or $istioInjection $.Values.packages.addons.kiali.enabled }}
enforcer:
  {{- if $istioInjection }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
  {{- end }}
cve:
  updater:
    {{- if $istioInjection }}
    podAnnotations:
      {{ include "istioAnnotation" . }}
    {{- end }}
  scanner:
    {{- if $istioInjection }}
    podAnnotations:
      {{ include "istioAnnotation" . }}
    {{- end }}
{{- end }}

{{- if or (include "istioEnabled" .) $.Values.packages.addons.kiali.enabled }}
manager:
  {{- if $istioInjection }}
  podAnnotations:
    {{ include "istioAnnotation" . }}
  {{- end }}
{{- end }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}
  istioNamespaceSelector:
  {{ include "istioNamespaceSelector" . | nindent 4 }}
  ingressLabels:
  {{- if .Values.packages.core.istio.enabled }}
    {{- $gateway := default "public" .Values.packages.addons.neuvector.ingress.gateway }}
    {{- $default := dict "app" (dig "gateways" $gateway "ingressGateway" nil .Values.packages.core.istio) "istio" nil }}
    {{- toYaml (dig "values" "gateways" $gateway "selector" $default .Values.packages.core.istio) | nindent 4 }}
  {{- end }}
  {{- if .Values.packages.core.istioCore.enabled }}
    app: public-ingressgateway
    istio: ingressgateway
  {{- end }}
{{- end }}

{{- /* Create secret */ -}}
{{- if .Values.packages.addons.neuvector.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.packages.addons.neuvector "name" "neuvector" "defaults" (include "bigbang.defaults.neuvector" .)) }}
{{- end }}
