{{- /* Create secret */ -}}
{{- if .Values.addons.mimir.enabled }}
{{- include "values-secret" (dict "root" $ "package" .Values.addons.mimir "name" "mimir" "defaults" (include "bigbang.defaults.mimir" .)) }}
{{- end }}

{{- define "bigbang.defaults.mimir" -}}
{{- $minioEnabled := (.Values.addons.mimir.minio.enabled) }}
monitoring:
  enabled: {{ .Values.monitoring.enabled }}

networkPolicies:
  enabled: {{ .Values.networkPolicies.enabled }}
  controlPlaneCidr: {{ .Values.networkPolicies.controlPlaneCidr }}

istio:
  enabled: {{ .Values.istio.enabled }}
  hardened:
    enabled: {{ or
      (dig "istio" "hardened" "enabled" false .Values.monitoring.values)
      (dig "istio" "hardened" "enabled" false .Values.addons.authservice.values)
      (dig "hardened" "enabled" false .Values.istio.values)
      (dig "istio" "hardened" "enabled" false .Values.grafana.values)
      (dig "istio" "hardened" "enabled" false .Values.loki.values)
      (dig "istio" "hardened" "enabled" false .Values.eckOperator.values)
      (dig "istio" "hardened" "enabled" false .Values.elasticsearchKibana.values)
      (dig "istio" "hardened" "enabled" false .Values.addons.mimir.values)
    }}

mimir-distributed:
  query_scheduler:
    enabled: {{ not .Values.istio.enabled }}
  {{- if $minioEnabled }}
  mimir:
    structuredConfig:
    {{- if index .Values.addons.mimir.values "mimir-distributed" "enterprise" "enabled" }}
      admin_client:
      backend: s3
      s3:
        bucket_name: enterprise-metrics-admin
    {{- end }}
      alertmanager_storage:
        backend: s3
        s3:
          bucket_name: mimir-ruler
      blocks_storage:
        backend: s3
        s3:
          bucket_name: mimir-tsdb
      ruler_storage:
        backend: s3
        s3:
          bucket_name: mimir-ruler
      common:
        storage:
          backend: s3
          s3:
            bucket_name: mimir
            # This should be the same as the generated credentials for miniobb.defaultUserCredentials.username below
            access_key_id: mimir-user
            endpoint: minio.mimir.svc.cluster.local
            insecure: true
            # This should be the same as the generated credentials for miniobb.defaultUserCredentials.password below
            secret_access_key: supersecret
    {{- end }}
{{- end }}