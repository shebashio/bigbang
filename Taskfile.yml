# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BIGBANG_DIR: .
  BIGBANG_K3D_CHART: oci://ghcr.io/rjferguson21/bb-k3d:0.1.3
  LOCAL_TMP: dev

includes:
  aws:
    taskfile: ./taskfiles/aws.yml

tasks:
  default:
    desc: Create EC2 instance, create k3d cluster, deploy BigBang, and run tests
    vars:
      DEV_VALUES_RAW:
        sh: "cat dev.yaml || echo '{}' | yq e -"
      DEV_VALUES:
        ref: "fromYaml .DEV_VALUES_RAW"
    cmds:
      - task: aws:ec2
      - task: setuphost
        vars:
          COMMAND_PREFIX: "{{ .DEV_VALUES.COMMAND_PREFIX }}"
          BASE_MOUNT_DIR: "{{ .DEV_VALUES.BASE_MOUNT_DIR }}"
          EC2_PUBLIC_IP: "{{ .DEV_VALUES.EC2_PUBLIC_IP }}"
      - task: k3d:create
        vars: 
          BASE_MOUNT_DIR: "{{ .DEV_VALUES.BASE_MOUNT_DIR }}"
          DOCKER_HOST: "{{ .DEV_VALUES.DOCKER_HOST }}"
      - task: deploy
      - task: test

  localdev:
    desc: Create a k3d cluster, deploy BigBang, and run tests
    cmds:
      - task: setuphost
        vars:
          BASE_MOUNT_DIR: "{{ .LOCAL_TMP }}"
      - task: k3d:create
      - task: deploy
      - task: test

  k3d:create:
    desc: Create a k3d cluster for testing with flux and MetalLB
    vars:
      TEMPLATE_VARS: --set=k3d.serverIP="0.0.0.0" --set=k3d.volumeBaseDir="{{.BASE_MOUNT_DIR}}" --set=registry1.username=$REGISTRY1_USERNAME --set=registry1.password=$REGISTRY1_PASSWORD
    cmds:
      - mkdir -p {{.LOCAL_TMP}}
      - helm template k3d "{{.BIGBANG_K3D_CHART}}" {{.TEMPLATE_VARS}} > {{.LOCAL_TMP}}/bootstrap.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "Simple")' > {{.LOCAL_TMP}}/k3d.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "ConfigMap" and .metadata.name == "bigbang-k3d-dev-values") | .stringData["values.yaml"]' > {{.LOCAL_TMP}}/dev-values.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "ConfigMap" and .metadata.name == "bigbang-k3d-dev-values") | .stringData["etchost"]' > {{.LOCAL_TMP}}/etchost
      - DOCKER_HOST={{.DOCKER_HOST}} k3d cluster delete -a && DOCKER_HOST={{.DOCKER_HOST}} k3d cluster create --config {{.LOCAL_TMP}}/k3d.yaml
      - i=0; until kubectl get deployment helm-controller >/dev/null 2>&1 || [ $i -ge 3 ]; do sleep 1; i=$((i+1)); done

  setuphost:
    desc: Sets up etc hosts for k3d cluster host, creates cypress directory
    cmds:
      - "{{ .COMMAND_PREFIX }} mkdir -p \"{{.BASE_MOUNT_DIR}}/cypress\""
      - "{{ .COMMAND_PREFIX }} sudo sed -i '/dev.bigbang.mil/d' /etc/hosts"
      - "cat {{.LOCAL_TMP}}/etchost | {{ .COMMAND_PREFIX }} sudo tee -a /etc/hosts"

  deploy:
    desc: Deploy a BigBang instance to the k3d cluster
    cmds:
      - helm upgrade --install bigbang {{.BIGBANG_DIR}}/chart
        --namespace=bigbang --create-namespace --values {{.BIGBANG_DIR}}/tests/test-values.yaml
        --values {{.BIGBANG_DIR}}/chart/ingress-certs.yaml
        --values {{.LOCAL_TMP}}/dev-values.yaml
        --set=registryCredentials.username=$REGISTRY1_USERNAME
        --set=flux.interval=5s
        {{ .EXTRA_ARGS }}
      - kubectl wait helmrelease -A --selector=app.kubernetes.io/instance=bigbang --for=condition=ready --timeout=800s

  test:
    desc: Run Big Bang gluon tests
    cmds:
      - for: ['kyverno-kyverno', 'kyverno-kyverno-policies']
        cmd: helm test {{ .ITEM }} -n bigbang
  
  schema-validate:
    desc: Run Big Bang schema valid
    cmds:
      - for: ['kiali', 'loki']
        cmd: helm template chart -f tests/test-values.yaml | yq e 'select(.kind == "Secret" and .metadata.name == "release-name-{{.ITEM}}-values")' | yq -oy '.stringData.defaults as $defaults | .stringData.overlays as $overlays | ($defaults | from_yaml) * ($overlays | from_yaml)' - | helm template oci://registry1.dso.mil/bigbang/{{.ITEM}}:$(yq '.{{.ITEM}}.git.tag' chart/values.yaml) -f -
      - for: ['keycloak']
        cmd: helm template chart -f tests/test-values.yaml | yq e 'select(.kind == "Secret" and .metadata.name == "release-name-{{.ITEM}}-values")' | yq -oy '.stringData.defaults as $defaults | .stringData.overlays as $overlays | ($defaults | from_yaml) * ($overlays | from_yaml)' - | helm template oci://registry1.dso.mil/bigbang/{{.ITEM}}:$(yq '.addons.{{.ITEM}}.git.tag' chart/values.yaml) -f -
