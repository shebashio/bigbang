# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BIGBANG_DIR: .
  BIGBANG_K3D_CHART: oci://ghcr.io/rjferguson21/bb-k3d:0.1.3
  LOCAL_TMP: dev

  # AWS Variables
  AWS_USERNAME: 
    sh: aws sts get-caller-identity --query 'Arn' --output text | cut -d'/' -f3 | tr -d '@'
  EC2_PUBLIC_IP:
    sh: aws ec2 describe-instances --filters "Name=tag:Name,Values={{.AWS_USERNAME}}-dev" "Name=instance-state-name,Values=pending,running,stopping,stopped"  --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output json | jq -r '.[0][0][0]'
  COMMAND_PREFIX: ssh ubuntu@{{.EC2_PUBLIC_IP}}
  BASE_MOUNT_DIR:
    sh: "{{ .COMMAND_PREFIX }} \"pwd\""
  DOCKER_HOST: ssh://ubuntu@{{.EC2_PUBLIC_IP}}

tasks:
  default:
    desc: Create EC2 instance, create k3d cluster, deploy BigBang, and run tests
    cmds:
      - task: ec2
      - task: setuphost
      - task: cluster-bootstrap
      - task: deploy
      - task: test

  localdev:
    desc: Create a k3d cluster, deploy BigBang, and run tests
    cmds:
      - task: setuphost
      - task: cluster-bootstrap
      - task: deploy
      - task: test

  ec2:
    internal: true
    desc: Create an EC2 instance for BigBang development using k3d-dev script
    cmds:
      - "{{.BIGBANG_DIR}}/docs/assets/scripts/developer/k3d-dev.sh"

  cluster-bootstrap:
    desc: Create a k3d cluster for testing with flux and MetalLB
    vars:
      TEMPLATE_VARS: --set=k3d.serverIP="0.0.0.0" --set=k3d.volumeBaseDir="{{.BASE_MOUNT_DIR}}" --set=registry1.username=$REGISTRY1_USERNAME --set=registry1.password=$REGISTRY1_PASSWORD
    cmds:
      - mkdir -p {{.LOCAL_TMP}}
      - helm template k3d "{{.BIGBANG_K3D_CHART}}" --set=registry1.username=$REGISTRY1_USERNAME --set=registry1.password=$REGISTRY1_PASSWORD > {{.LOCAL_TMP}}/bootstrap.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "Simple")' > {{.LOCAL_TMP}}/k3d.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "ConfigMap" and .metadata.name == "bigbang-k3d-dev-values") | .stringData["values.yaml"]' > {{.LOCAL_TMP}}/dev-values.yaml
      - cat {{.LOCAL_TMP}}/bootstrap.yaml | yq e 'select(.kind == "ConfigMap" and .metadata.name == "bigbang-k3d-dev-values") | .stringData["etchost"]' > {{.LOCAL_TMP}}/etchost
      - DOCKER_HOST={{.DOCKER_HOST}} k3d cluster delete -a && DOCKER_HOST={{.DOCKER_HOST}} k3d cluster create --config {{.LOCAL_TMP}}/k3d.yaml
      - i=0; until kubectl get deployment helm-controller >/dev/null 2>&1 || [ $i -ge 3 ]; do sleep 1; i=$((i+1)); done

  deploy:
    desc: Deploy a BigBang instance to the k3d cluster
    cmds:
      - helm upgrade --install bigbang {{.BIGBANG_DIR}}/chart
        --namespace=bigbang --create-namespace --values {{.BIGBANG_DIR}}/tests/test-values.yaml
        --values {{.BIGBANG_DIR}}/chart/ingress-certs.yaml
        --values {{.LOCAL_TMP}}/dev-values.yaml
        --set=registryCredentials.username=$REGISTRY1_USERNAME
        --set=flux.interval=5s
      - kubectl wait helmrelease -A --selector=app.kubernetes.io/instance=bigbang --for=condition=ready --timeout=800s

  test:
    desc: Run Big Bang gluon tests
    cmds:
      - for: ['kiali-kiali', 'alloy']
        cmd: helm test {{ .ITEM }} -n bigbang

  setuphost:
    desc: Sets up etc hosts for k3d cluster host, creates cypress directory
    cmds:
      - "{{ .COMMAND_PREFIX }} mkdir -p \"{{.BASE_MOUNT_DIR}}/cypress\""
      - "{{ .COMMAND_PREFIX }} sudo sed -i '/dev.bigbang.mil/d' /etc/hosts"
      - "cat {{.LOCAL_TMP}}/etchost | {{ .COMMAND_PREFIX }} sudo tee -a /etc/hosts"